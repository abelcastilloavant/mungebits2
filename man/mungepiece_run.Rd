% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mungepiece-run.R
\name{mungepiece_run}
\alias{mungepiece_run}
\title{Run a mungepiece and prepare it for a live production setting.}
\usage{
mungepiece_run(data, ..., `_envir` = parent.frame())
}
\arguments{
\item{data}{environment or data.frame. Essentially an environment
containing a \code{data} variable. In this case, that \code{data} variable
will have a side effect enacted on it. If a \code{data.frame}, then 
the return value will be the modified \code{data.frame} and the mungebit
will record any results it must memorize in its \code{input}.}

\item{...}{additional arguments to the mungebit's \code{train_function} or
\code{predict_function}.}

\item{_envir}{environment. The calling environment for the train
or predict function on the underlying mungebit. This is an internal
argument and is \code{parent.frame()} by default.}
}
\value{
If the \code{data} parameter is an environment, the transformed
   environment (i.e., the transformed data in the environment) after 
   application of the underlying mungebit. If \code{data} is a data.frame,
   the transformed data.frame is returned.
}
\description{
Running a mungepiece achieves the same effect as running the mungebit
attached to the mungepiece: the first time it is run, we \emph{train}
the mungebit so it remembers metadata it will need to replicate the
operation in a live production setting on a single row of data. The
second and subsequent times we run the mungepiece, it will execute
the predict function of the underlying mungebit.
}

